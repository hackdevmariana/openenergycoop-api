<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Notification;
use App\Models\User;
use Carbon\Carbon;

class NotificationSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Obtener usuarios existentes
        $users = User::all();
        
        if ($users->isEmpty()) {
            $this->command->warn('No hay usuarios en la base de datos. Creando notificaciones sin usuario asignado.');
            $users = collect([null]);
        }

        // Datos de notificaciones variadas
        $notifications = [
            // Notificaciones de Ã©xito
            [
                'title' => 'InstalaciÃ³n Completada',
                'message' => 'Tu sistema de paneles solares ha sido instalado exitosamente. Ya puedes comenzar a generar energÃ­a renovable.',
                'type' => Notification::TYPE_SUCCESS,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subHours(2),
            ],
            [
                'title' => 'Pago Procesado',
                'message' => 'Tu pago mensual de â‚¬45.50 ha sido procesado correctamente. Gracias por tu contribuciÃ³n a la energÃ­a sostenible.',
                'type' => Notification::TYPE_SUCCESS,
                'read_at' => Carbon::now()->subHours(1),
                'delivered_at' => Carbon::now()->subHours(3),
            ],
            [
                'title' => 'Meta Alcanzada',
                'message' => 'Â¡Felicidades! Has alcanzado tu meta mensual de producciÃ³n de energÃ­a. Has generado 850 kWh este mes.',
                'type' => Notification::TYPE_SUCCESS,
                'read_at' => Carbon::now()->subMinutes(30),
                'delivered_at' => Carbon::now()->subHours(1),
            ],

            // Notificaciones de informaciÃ³n
            [
                'title' => 'Nuevo Evento Disponible',
                'message' => 'Te invitamos al prÃ³ximo taller sobre eficiencia energÃ©tica el prÃ³ximo sÃ¡bado a las 10:00 AM.',
                'type' => Notification::TYPE_INFO,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subDays(1),
            ],
            [
                'title' => 'ActualizaciÃ³n del Sistema',
                'message' => 'Hemos actualizado nuestra plataforma con nuevas funcionalidades. Descubre las mejoras en tu panel de control.',
                'type' => Notification::TYPE_INFO,
                'read_at' => Carbon::now()->subDays(2),
                'delivered_at' => Carbon::now()->subDays(2),
            ],
            [
                'title' => 'Reporte Mensual Disponible',
                'message' => 'Tu reporte de consumo y producciÃ³n del mes pasado ya estÃ¡ disponible. Revisa tu progreso energÃ©tico.',
                'type' => Notification::TYPE_INFO,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subDays(3),
            ],

            // Notificaciones de advertencia
            [
                'title' => 'Consumo Elevado Detectado',
                'message' => 'Hemos detectado un consumo de energÃ­a superior al habitual en tu hogar. Revisa tus electrodomÃ©sticos.',
                'type' => Notification::TYPE_WARNING,
                'read_at' => Carbon::now()->subHours(4),
                'delivered_at' => Carbon::now()->subHours(5),
            ],
            [
                'title' => 'Mantenimiento Programado',
                'message' => 'Tu sistema de paneles solares requiere mantenimiento preventivo. Contacta con nuestro equipo tÃ©cnico.',
                'type' => Notification::TYPE_WARNING,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subDays(1),
            ],
            [
                'title' => 'Factura Pendiente',
                'message' => 'Tienes una factura pendiente de pago. Por favor, realiza el pago antes del vencimiento para evitar interrupciones.',
                'type' => Notification::TYPE_WARNING,
                'read_at' => Carbon::now()->subDays(1),
                'delivered_at' => Carbon::now()->subDays(2),
            ],

            // Notificaciones de alerta
            [
                'title' => 'Corte de EnergÃ­a Detectado',
                'message' => 'Se ha detectado una interrupciÃ³n en el suministro elÃ©ctrico en tu zona. Estamos trabajando para restablecer el servicio.',
                'type' => Notification::TYPE_ALERT,
                'read_at' => Carbon::now()->subMinutes(15),
                'delivered_at' => Carbon::now()->subMinutes(20),
            ],
            [
                'title' => 'Sistema en Modo de Respaldo',
                'message' => 'Tu sistema ha activado el modo de respaldo. La energÃ­a se estÃ¡ suministrando desde las baterÃ­as de almacenamiento.',
                'type' => Notification::TYPE_ALERT,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subHours(1),
            ],
            [
                'title' => 'Alta Demanda de EnergÃ­a',
                'message' => 'Se prevÃ© una alta demanda de energÃ­a en las prÃ³ximas horas. Considera reducir el consumo no esencial.',
                'type' => Notification::TYPE_ALERT,
                'read_at' => Carbon::now()->subHours(2),
                'delivered_at' => Carbon::now()->subHours(3),
            ],

            // Notificaciones de error
            [
                'title' => 'Error en el Sistema de Monitoreo',
                'message' => 'Hemos detectado un problema tÃ©cnico en el sistema de monitoreo de tu instalaciÃ³n. Nuestro equipo tÃ©cnico estÃ¡ investigando.',
                'type' => Notification::TYPE_ERROR,
                'read_at' => Carbon::now()->subHours(6),
                'delivered_at' => Carbon::now()->subHours(7),
            ],
            [
                'title' => 'Fallo en la ConexiÃ³n',
                'message' => 'No se ha podido establecer conexiÃ³n con tu medidor inteligente. Verifica la conexiÃ³n a internet.',
                'type' => Notification::TYPE_ERROR,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subDays(1),
            ],
            [
                'title' => 'Error en el Procesamiento de Pago',
                'message' => 'Ha ocurrido un error al procesar tu Ãºltimo pago. Por favor, verifica los datos de tu tarjeta y vuelve a intentar.',
                'type' => Notification::TYPE_ERROR,
                'read_at' => Carbon::now()->subDays(2),
                'delivered_at' => Carbon::now()->subDays(2),
            ],

            // Notificaciones adicionales
            [
                'title' => 'Bienvenido a la Cooperativa',
                'message' => 'Â¡Bienvenido a Open Energy Coop! Estamos emocionados de tenerte como parte de nuestra comunidad de energÃ­a renovable.',
                'type' => Notification::TYPE_SUCCESS,
                'read_at' => Carbon::now()->subDays(7),
                'delivered_at' => Carbon::now()->subDays(7),
            ],
            [
                'title' => 'Nueva Funcionalidad: Trading de EnergÃ­a',
                'message' => 'Ahora puedes vender el exceso de energÃ­a que generes a otros miembros de la cooperativa. Â¡Descubre cÃ³mo funciona!',
                'type' => Notification::TYPE_INFO,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subDays(5),
            ],
            [
                'title' => 'Recordatorio: ReuniÃ³n de Miembros',
                'message' => 'No olvides la reuniÃ³n trimestral de miembros el prÃ³ximo viernes a las 18:00. Tu participaciÃ³n es importante.',
                'type' => Notification::TYPE_ALERT,
                'read_at' => Carbon::now()->subDays(1),
                'delivered_at' => Carbon::now()->subDays(2),
            ],
            [
                'title' => 'Certificado de EnergÃ­a Renovable',
                'message' => 'Tu certificado de energÃ­a renovable del Ãºltimo trimestre estÃ¡ listo. DescÃ¡rgalo desde tu panel de control.',
                'type' => Notification::TYPE_SUCCESS,
                'read_at' => Carbon::now()->subDays(3),
                'delivered_at' => Carbon::now()->subDays(4),
            ],
            [
                'title' => 'ActualizaciÃ³n de PolÃ­tica de Privacidad',
                'message' => 'Hemos actualizado nuestra polÃ­tica de privacidad. Por favor, revisa los cambios en tu prÃ³xima visita.',
                'type' => Notification::TYPE_INFO,
                'read_at' => null,
                'delivered_at' => Carbon::now()->subDays(6),
            ],
        ];

        $this->command->info('Creando notificaciones...');

        $createdCount = 0;
        $totalNotifications = count($notifications);

        foreach ($notifications as $index => $notificationData) {
            // Asignar usuario aleatorio o null si no hay usuarios
            $user = $users->isNotEmpty() ? $users->random() : null;
            
            if ($user) {
                $notificationData['user_id'] = $user->id;
            }

            // Crear la notificaciÃ³n
            Notification::create($notificationData);
            $createdCount++;

            // Mostrar progreso cada 5 notificaciones
            if (($index + 1) % 5 === 0) {
                $this->command->info("Progreso: {$createdCount}/{$totalNotifications} notificaciones creadas");
            }
        }

        $this->command->info("âœ… Se han creado {$createdCount} notificaciones exitosamente");

        // Mostrar estadÃ­sticas
        $this->showStatistics();
    }

    /**
     * Mostrar estadÃ­sticas de las notificaciones creadas
     */
    private function showStatistics(): void
    {
        $this->command->info("\nğŸ“Š EstadÃ­sticas de Notificaciones:");
        
        $total = Notification::count();
        $unread = Notification::unread()->count();
        $read = Notification::read()->count();
        $delivered = Notification::delivered()->count();
        $notDelivered = Notification::notDelivered()->count();

        $this->command->info("â€¢ Total: {$total}");
        $this->command->info("â€¢ No leÃ­das: {$unread}");
        $this->command->info("â€¢ LeÃ­das: {$read}");
        $this->command->info("â€¢ Entregadas: {$delivered}");
        $this->command->info("â€¢ No entregadas: {$notDelivered}");

        // EstadÃ­sticas por tipo
        $this->command->info("\nğŸ“ˆ Por tipo:");
        foreach (Notification::getTypes() as $type) {
            $count = Notification::byType($type)->count();
            $this->command->info("â€¢ {$type}: {$count}");
        }

        // EstadÃ­sticas por usuario
        $usersWithNotifications = Notification::selectRaw('user_id, COUNT(*) as count')
            ->whereNotNull('user_id')
            ->groupBy('user_id')
            ->get();

        if ($usersWithNotifications->isNotEmpty()) {
            $this->command->info("\nğŸ‘¥ Notificaciones por usuario:");
            foreach ($usersWithNotifications as $userNotification) {
                $user = User::find($userNotification->user_id);
                $userName = $user ? $user->name : "Usuario ID {$userNotification->user_id}";
                $this->command->info("â€¢ {$userName}: {$userNotification->count} notificaciones");
            }
        }
    }
}