<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Refund;
use App\Models\User;
use App\Models\Payment;
use App\Models\Invoice;
use App\Models\Transaction;
use App\Models\EnergyCooperative;
use Carbon\Carbon;

class RefundSeeder extends Seeder
{
    public function run(): void
    {
        $users = User::take(10)->get();
        $payments = Payment::take(5)->get();
        $invoices = Invoice::take(5)->get();
        $transactions = Transaction::take(5)->get();
        $cooperatives = EnergyCooperative::take(3)->get();
        
        if ($users->isEmpty()) {
            $this->command->warn('⚠️ No hay usuarios disponibles. Saltando RefundSeeder.');
            return;
        }

        $refunds = [
            [
                'refund_code' => Refund::generateRefundCode(),
                'external_refund_id' => 'ext_rfd_' . uniqid(),
                'reference' => 'REF-' . uniqid(),
                'user_id' => $users->first()->id,
                'payment_id' => $payments->first()?->id,
                'invoice_id' => $invoices->first()?->id,
                'transaction_id' => $transactions->first()?->id,
                'energy_cooperative_id' => $cooperatives->first()?->id,
                'type' => 'full',
                'reason' => 'service_cancellation',
                'status' => 'completed',
                'refund_amount' => 125.50,
                'original_amount' => 125.50,
                'processing_fee' => 0.00,
                'net_refund_amount' => 125.50,
                'currency' => 'EUR',
                'exchange_rate' => 1.0,
                'original_currency_amount' => 125.50,
                'original_currency' => 'EUR',
                'refund_method' => 'bank_transfer',
                'refund_destination' => 'card',
                'refund_details' => ['card_last_four' => '4242', 'card_brand' => 'visa'],
                'gateway' => 'stripe',
                'gateway_refund_id' => 're_' . uniqid(),
                'gateway_response' => ['status' => 'succeeded', 'refund_id' => 're_' . uniqid()],
                'gateway_status' => 'succeeded',
                'requested_at' => Carbon::now()->subDays(7),
                'approved_at' => Carbon::now()->subDays(6),
                'processed_at' => Carbon::now()->subDays(6)->addHours(2),
                'completed_at' => Carbon::now()->subDays(5),
                'failed_at' => null,
                'expires_at' => null,
                'description' => 'Reembolso completo por cancelación de servicio energético',
                'customer_reason' => 'Cambio de domicilio - servicio no disponible en nueva ubicación',
                'internal_notes' => 'Cliente se mudó a zona sin cobertura. Reembolso aprobado automáticamente.',
                'supporting_documents' => ['cancellation_request.pdf', 'address_change_proof.pdf'],
                'energy_amount_kwh' => 150.00,
                'energy_price_per_kwh' => 0.81,
                'energy_service_date' => Carbon::now()->subDays(10),
                'energy_contract_id' => null,
                'requested_by_id' => $users->first()->id,
                'approved_by_id' => $users->first()->id,
                'processed_by_id' => $users->first()->id,
                'requires_approval' => false,
                'auto_approved' => true,
                'auto_approval_threshold' => 200.00,
                'is_chargeback' => false,
                'chargeback_id' => null,
                'chargeback_date' => null,
                'dispute_details' => null,
                'request_ip' => '192.168.1.100',
                'user_agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'is_test' => false,
                'audit_trail' => [
                    ['action' => 'requested', 'timestamp' => Carbon::now()->subDays(7)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'auto_approved', 'timestamp' => Carbon::now()->subDays(6)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'processed', 'timestamp' => Carbon::now()->subDays(6)->addHours(2)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'completed', 'timestamp' => Carbon::now()->subDays(5)->toISOString(), 'user_id' => $users->first()->id]
                ],
                'customer_notified' => true,
                'customer_notified_at' => Carbon::now()->subDays(5),
                'notification_history' => [
                    ['type' => 'refund_requested', 'notified_at' => Carbon::now()->subDays(7)->toISOString()],
                    ['type' => 'refund_approved', 'notified_at' => Carbon::now()->subDays(6)->toISOString()],
                    ['type' => 'refund_completed', 'notified_at' => Carbon::now()->subDays(5)->toISOString()]
                ],
                'metadata' => ['energy_type' => 'solar', 'kwh_amount' => 150, 'cancellation_reason' => 'relocation'],
                'failure_reason' => null,
                'retry_count' => 0,
                'next_retry_at' => null,
            ],
            [
                'refund_code' => Refund::generateRefundCode(),
                'external_refund_id' => 'ext_rfd_' . uniqid(),
                'reference' => 'REF-' . uniqid(),
                'user_id' => $users->skip(1)->first()->id,
                'payment_id' => $payments->skip(1)->first()?->id,
                'invoice_id' => $invoices->skip(1)->first()?->id,
                'transaction_id' => $transactions->skip(1)->first()?->id,
                'energy_cooperative_id' => $cooperatives->skip(1)->first()?->id,
                'type' => 'partial',
                'reason' => 'energy_not_delivered',
                'status' => 'processing',
                'refund_amount' => 25.00,
                'original_amount' => 89.99,
                'processing_fee' => 0.00,
                'net_refund_amount' => 25.00,
                'currency' => 'EUR',
                'exchange_rate' => 1.0,
                'original_currency_amount' => 25.00,
                'original_currency' => 'EUR',
                'refund_method' => 'chargeback',
                'refund_destination' => 'user_wallet',
                'refund_details' => ['wallet_id' => 'wallet_' . $users->skip(1)->first()->id],
                'gateway' => 'internal',
                'gateway_refund_id' => 'internal_' . uniqid(),
                'gateway_response' => ['status' => 'processing', 'chargeback' => 25.00],
                'gateway_status' => 'processing',
                'requested_at' => Carbon::now()->subDays(3),
                'approved_at' => Carbon::now()->subDays(2),
                'processed_at' => Carbon::now()->subDays(1),
                'completed_at' => null,
                'failed_at' => null,
                'expires_at' => null,
                'description' => 'Reembolso parcial por energía no entregada',
                'customer_reason' => 'Interrupción de servicio durante 2 días del período de facturación',
                'internal_notes' => 'Interrupción por mantenimiento programado. Reembolso proporcional calculado.',
                'supporting_documents' => ['service_interruption_report.pdf', 'maintenance_schedule.pdf'],
                'energy_amount_kwh' => 30.00,
                'energy_price_per_kwh' => 0.83,
                'energy_service_date' => Carbon::now()->subDays(15),
                'energy_contract_id' => null,
                'requested_by_id' => $users->skip(1)->first()->id,
                'approved_by_id' => $users->first()->id,
                'processed_by_id' => $users->first()->id,
                'requires_approval' => true,
                'auto_approved' => false,
                'auto_approval_threshold' => 200.00,
                'is_chargeback' => false,
                'chargeback_id' => null,
                'chargeback_date' => null,
                'dispute_details' => null,
                'request_ip' => '192.168.1.101',
                'user_agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                'is_test' => false,
                'audit_trail' => [
                    ['action' => 'requested', 'timestamp' => Carbon::now()->subDays(3)->toISOString(), 'user_id' => $users->skip(1)->first()->id],
                    ['action' => 'approved', 'timestamp' => Carbon::now()->subDays(2)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'processing', 'timestamp' => Carbon::now()->subDays(1)->toISOString(), 'user_id' => $users->first()->id]
                ],
                'customer_notified' => true,
                'customer_notified_at' => Carbon::now()->subDays(2),
                'notification_history' => [
                    ['type' => 'refund_requested', 'notified_at' => Carbon::now()->subDays(3)->toISOString()],
                    ['type' => 'refund_approved', 'notified_at' => Carbon::now()->subDays(2)->toISOString()]
                ],
                'metadata' => ['energy_type' => 'wind', 'kwh_amount' => 30, 'interruption_days' => 2],
                'failure_reason' => null,
                'retry_count' => 0,
                'next_retry_at' => null,
            ],
            [
                'refund_code' => Refund::generateRefundCode(),
                'external_refund_id' => 'ext_rfd_' . uniqid(),
                'reference' => 'REF-' . uniqid(),
                'user_id' => $users->skip(2)->first()->id,
                'payment_id' => $payments->skip(2)->first()?->id,
                'invoice_id' => $invoices->skip(2)->first()?->id,
                'transaction_id' => $transactions->skip(2)->first()?->id,
                'energy_cooperative_id' => $cooperatives->skip(2)->first()?->id,
                'type' => 'full',
                'reason' => 'billing_error',
                'status' => 'pending',
                'refund_amount' => 75.25,
                'original_amount' => 75.25,
                'processing_fee' => 0.00,
                'net_refund_amount' => 75.25,
                'currency' => 'EUR',
                'exchange_rate' => 1.0,
                'original_currency_amount' => 75.25,
                'original_currency' => 'EUR',
                'refund_method' => 'bank_transfer',
                'refund_destination' => 'paypal',
                'refund_details' => ['paypal_email' => $users->skip(2)->first()->email],
                'gateway' => 'paypal',
                'gateway_refund_id' => null,
                'gateway_response' => null,
                'gateway_status' => 'pending',
                'requested_at' => Carbon::now()->subDays(1),
                'approved_at' => null,
                'processed_at' => null,
                'completed_at' => null,
                'failed_at' => null,
                'expires_at' => Carbon::now()->addDays(30),
                'description' => 'Reembolso por error de facturación',
                'customer_reason' => 'Facturación duplicada del mismo período',
                'internal_notes' => 'Error en sistema de facturación detectado. Reembolso pendiente de aprobación manual.',
                'supporting_documents' => ['duplicate_invoice_evidence.pdf', 'billing_error_report.pdf'],
                'energy_amount_kwh' => 100.00,
                'energy_price_per_kwh' => 0.75,
                'energy_service_date' => Carbon::now()->subDays(20),
                'energy_contract_id' => null,
                'requested_by_id' => $users->skip(2)->first()->id,
                'approved_by_id' => null,
                'processed_by_id' => null,
                'requires_approval' => true,
                'auto_approved' => false,
                'auto_approval_threshold' => 200.00,
                'is_chargeback' => false,
                'chargeback_id' => null,
                'chargeback_date' => null,
                'dispute_details' => null,
                'request_ip' => '192.168.1.102',
                'user_agent' => 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
                'is_test' => false,
                'audit_trail' => [
                    ['action' => 'requested', 'timestamp' => Carbon::now()->subDays(1)->toISOString(), 'user_id' => $users->skip(2)->first()->id]
                ],
                'customer_notified' => true,
                'customer_notified_at' => Carbon::now()->subDays(1),
                'notification_history' => [
                    ['type' => 'refund_requested', 'notified_at' => Carbon::now()->subDays(1)->toISOString()]
                ],
                'metadata' => ['energy_type' => 'wind', 'kwh_amount' => 100, 'billing_error' => 'duplicate'],
                'failure_reason' => null,
                'retry_count' => 0,
                'next_retry_at' => null,
            ],
            [
                'refund_code' => Refund::generateRefundCode(),
                'external_refund_id' => 'ext_rfd_' . uniqid(),
                'reference' => 'REF-' . uniqid(),
                'user_id' => $users->skip(3)->first()->id,
                'payment_id' => $payments->skip(3)->first()?->id,
                'invoice_id' => null,
                'transaction_id' => $transactions->skip(3)->first()?->id,
                'energy_cooperative_id' => null,
                'type' => 'processing_fee',
                'reason' => 'overpayment',
                'status' => 'completed',
                'refund_amount' => 5.00,
                'original_amount' => 200.00,
                'processing_fee' => 0.00,
                'net_refund_amount' => 5.00,
                'currency' => 'EUR',
                'exchange_rate' => 1.0,
                'original_currency_amount' => 5.00,
                'original_currency' => 'EUR',
                'refund_method' => 'chargeback',
                'refund_destination' => 'user_wallet',
                'refund_details' => ['wallet_id' => 'wallet_' . $users->skip(3)->first()->id],
                'gateway' => 'internal',
                'gateway_refund_id' => 'internal_' . uniqid(),
                'gateway_response' => ['status' => 'completed', 'chargeback' => 5.00],
                'gateway_status' => 'completed',
                'requested_at' => Carbon::now()->subDays(2),
                'approved_at' => Carbon::now()->subDays(2),
                'processed_at' => Carbon::now()->subDays(2)->addHours(1),
                'completed_at' => Carbon::now()->subDays(1),
                'failed_at' => null,
                'expires_at' => null,
                'description' => 'Reembolso de sobrepago en depósito de wallet',
                'customer_reason' => 'Depósito excesivo por error en el monto',
                'internal_notes' => 'Cliente depositó €200 en lugar de €195. Reembolso automático del exceso.',
                'supporting_documents' => ['deposit_confirmation.pdf'],
                'energy_amount_kwh' => null,
                'energy_price_per_kwh' => null,
                'energy_service_date' => null,
                'energy_contract_id' => null,
                'requested_by_id' => $users->skip(3)->first()->id,
                'approved_by_id' => $users->first()->id,
                'processed_by_id' => $users->first()->id,
                'requires_approval' => false,
                'auto_approved' => true,
                'auto_approval_threshold' => 200.00,
                'is_chargeback' => false,
                'chargeback_id' => null,
                'chargeback_date' => null,
                'dispute_details' => null,
                'request_ip' => '192.168.1.103',
                'user_agent' => 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15',
                'is_test' => false,
                'audit_trail' => [
                    ['action' => 'requested', 'timestamp' => Carbon::now()->subDays(2)->toISOString(), 'user_id' => $users->skip(3)->first()->id],
                    ['action' => 'auto_approved', 'timestamp' => Carbon::now()->subDays(2)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'processed', 'timestamp' => Carbon::now()->subDays(2)->addHours(1)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'completed', 'timestamp' => Carbon::now()->subDays(1)->toISOString(), 'user_id' => $users->first()->id]
                ],
                'customer_notified' => true,
                'customer_notified_at' => Carbon::now()->subDays(1),
                'notification_history' => [
                    ['type' => 'refund_requested', 'notified_at' => Carbon::now()->subDays(2)->toISOString()],
                    ['type' => 'refund_completed', 'notified_at' => Carbon::now()->subDays(1)->toISOString()]
                ],
                'metadata' => ['overpayment_amount' => 5, 'deposit_amount' => 200, 'intended_amount' => 195],
                'failure_reason' => null,
                'retry_count' => 0,
                'next_retry_at' => null,
            ],
            [
                'refund_code' => Refund::generateRefundCode(),
                'external_refund_id' => 'ext_rfd_' . uniqid(),
                'reference' => 'REF-' . uniqid(),
                'user_id' => $users->skip(4)->first()->id,
                'payment_id' => $payments->skip(4)->first()?->id,
                'invoice_id' => $invoices->skip(4)->first()?->id,
                'transaction_id' => $transactions->skip(4)->first()?->id,
                'energy_cooperative_id' => $cooperatives->first()?->id,
                'type' => 'full',
                'reason' => 'chargeback',
                'status' => 'failed',
                'refund_amount' => 45.75,
                'original_amount' => 45.75,
                'processing_fee' => 15.00,
                'net_refund_amount' => 30.75,
                'currency' => 'EUR',
                'exchange_rate' => 1.0,
                'original_currency_amount' => 45.75,
                'original_currency' => 'EUR',
                'refund_method' => 'chargeback',
                'refund_destination' => 'card',
                'refund_details' => ['card_last_four' => '5555', 'card_brand' => 'mastercard'],
                'gateway' => 'stripe',
                'gateway_refund_id' => 'dp_' . uniqid(),
                'gateway_response' => ['status' => 'failed', 'error' => 'chargeback_disputed'],
                'gateway_status' => 'failed',
                'requested_at' => Carbon::now()->subDays(5),
                'approved_at' => Carbon::now()->subDays(4),
                'processed_at' => Carbon::now()->subDays(3),
                'completed_at' => null,
                'failed_at' => Carbon::now()->subDays(2),
                'expires_at' => null,
                'description' => 'Chargeback por disputa de cliente',
                'customer_reason' => 'Servicio no recibido según lo acordado',
                'internal_notes' => 'Cliente disputó la transacción. Evidencia de entrega presentada pero chargeback procesado.',
                'supporting_documents' => ['delivery_confirmation.pdf', 'service_log.pdf', 'dispute_response.pdf'],
                'energy_amount_kwh' => 75.00,
                'energy_price_per_kwh' => 0.61,
                'energy_service_date' => Carbon::now()->subDays(10),
                'energy_contract_id' => null,
                'requested_by_id' => $users->skip(4)->first()->id,
                'approved_by_id' => $users->first()->id,
                'processed_by_id' => $users->first()->id,
                'requires_approval' => true,
                'auto_approved' => false,
                'auto_approval_threshold' => 200.00,
                'is_chargeback' => true,
                'chargeback_id' => 'cb_' . uniqid(),
                'chargeback_date' => Carbon::now()->subDays(5),
                'dispute_details' => json_encode(['reason' => 'service_not_received', 'evidence_submitted' => true]),
                'request_ip' => '192.168.1.104',
                'user_agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'is_test' => false,
                'audit_trail' => [
                    ['action' => 'chargeback_initiated', 'timestamp' => Carbon::now()->subDays(5)->toISOString(), 'user_id' => $users->skip(4)->first()->id],
                    ['action' => 'approved', 'timestamp' => Carbon::now()->subDays(4)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'processed', 'timestamp' => Carbon::now()->subDays(3)->toISOString(), 'user_id' => $users->first()->id],
                    ['action' => 'failed', 'timestamp' => Carbon::now()->subDays(2)->toISOString(), 'user_id' => $users->first()->id]
                ],
                'customer_notified' => true,
                'customer_notified_at' => Carbon::now()->subDays(2),
                'notification_history' => [
                    ['type' => 'chargeback_initiated', 'notified_at' => Carbon::now()->subDays(5)->toISOString()],
                    ['type' => 'chargeback_failed', 'notified_at' => Carbon::now()->subDays(2)->toISOString()]
                ],
                'metadata' => ['energy_type' => 'hydro', 'kwh_amount' => 75, 'chargeback_reason' => 'service_dispute'],
                'failure_reason' => 'Chargeback disputado por el banco emisor',
                'retry_count' => 1,
                'next_retry_at' => Carbon::now()->addDays(1),
            ],
        ];

        foreach ($refunds as $refund) {
            Refund::firstOrCreate(
                ['refund_code' => $refund['refund_code']],
                $refund
            );
        }

        $this->command->info('✅ RefundSeeder ejecutado correctamente');
        $this->command->info('📊 Reembolsos creados: ' . count($refunds));
        $this->command->info('💳 Tipos: Completo (3), Parcial (1), Comisión de procesamiento (1)');
        $this->command->info('📈 Estados: Completado (2), Procesando (1), Pendiente (1), Fallido (1)');
        $this->command->info('💰 Monto total: €' . number_format(collect($refunds)->sum('refund_amount'), 2));
        $this->command->info('⚡ Energía total: ' . number_format(collect($refunds)->sum('energy_amount_kwh'), 2) . ' kWh');
        $this->command->info('🔄 Razones: Cancelación de servicio, Energía no entregada, Error de facturación, Sobrepago, Chargeback');
        $this->command->info('🏦 Gateways: Stripe, PayPal, Interno');
        $this->command->info('📋 Incluye chargebacks, auto-aprobaciones y notificaciones al cliente');
    }
}
