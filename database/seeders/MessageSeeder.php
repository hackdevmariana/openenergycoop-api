<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Message;
use App\Models\User;
use App\Models\Organization;
use Carbon\Carbon;
use Illuminate\Support\Str;

class MessageSeeder extends Seeder
{
    public function run(): void
    {
        $this->command->info('üí¨ Creando mensajes para el sistema de comunicaci√≥n...');
        
        // Limpiar mensajes existentes
        Message::query()->delete();
        
        // Obtener usuarios y organizaciones disponibles
        $users = User::all();
        $organizations = Organization::all();
        
        if ($users->isEmpty()) {
            $this->command->warn('‚ö†Ô∏è No hay usuarios disponibles. No se pueden crear mensajes.');
            return;
        }
        
        $this->command->info("üë• Usuarios disponibles: {$users->count()}");
        $this->command->info("üè¢ Organizaciones disponibles: {$organizations->count()}");
        
        // Crear mensajes para diferentes tipos y escenarios
        $this->createContactMessages($users, $organizations);
        $this->createSupportMessages($users, $organizations);
        $this->createComplaintMessages($users, $organizations);
        $this->createSuggestionMessages($users, $organizations);
        $this->createUrgentMessages($users, $organizations);
        $this->createSpamMessages($users, $organizations);
        
        $this->command->info('‚úÖ MessageSeeder completado. Se crearon ' . Message::count() . ' mensajes.');
    }
    
    private function createContactMessages($users, $organizations): void
    {
        $this->command->info('üìû Creando mensajes de contacto...');
        
        $contactSubjects = [
            'Consulta sobre servicios de energ√≠a renovable',
            'Informaci√≥n sobre membres√≠a en la cooperativa',
            'Solicitud de visita t√©cnica',
            'Consulta sobre facturaci√≥n',
            'Informaci√≥n sobre eventos y talleres',
            'Solicitud de documentaci√≥n',
            'Consulta sobre proyectos comunitarios',
            'Informaci√≥n sobre inversiones en energ√≠a verde'
        ];
        
        foreach ($contactSubjects as $subject) {
            for ($i = 0; $i < rand(2, 5); $i++) {
                $organization = $organizations->random();
                $user = $users->random();
                
                $message = $this->generateContactMessage($subject);
                $priority = $this->getPriorityForSubject($subject);
                $status = $this->getStatusForPriority($priority);
                
                $messageData = [
                    'name' => fake()->name(),
                    'email' => fake()->safeEmail(),
                    'phone' => fake()->optional(0.8)->phoneNumber(),
                    'subject' => $subject,
                    'message' => $message,
                    'status' => $status,
                    'priority' => $priority,
                    'message_type' => 'contact',
                    'ip_address' => $this->generateRandomIP(),
                    'user_agent' => $this->generateRandomUserAgent(),
                    'organization_id' => $organization->id,
                    'created_at' => Carbon::now()->subDays(rand(0, 30)),
                    'updated_at' => Carbon::now()->subDays(rand(0, 30))
                ];
                
                // Agregar campos adicionales seg√∫n el estado
                if ($status === 'read') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(1, 7));
                }
                
                if ($status === 'replied') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(3, 10));
                    $messageData['replied_at'] = Carbon::now()->subDays(rand(1, 5));
                    $messageData['replied_by_user_id'] = $users->random()->id;
                    $messageData['internal_notes'] = fake()->optional(0.7)->sentence();
                }
                
                if ($status === 'archived') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(10, 20));
                    $messageData['replied_at'] = Carbon::now()->subDays(rand(5, 15));
                    $messageData['replied_by_user_id'] = $users->random()->id;
                    $messageData['internal_notes'] = 'Mensaje procesado y archivado';
                }
                
                // Asignar a un usuario en algunos casos
                if (rand(1, 10) <= 4) {
                    $messageData['assigned_to_user_id'] = $users->random()->id;
                }
                
                Message::create($messageData);
            }
        }
        
        $this->command->info("üìû Mensajes de contacto creados");
    }
    
    private function createSupportMessages($users, $organizations): void
    {
        $this->command->info('üÜò Creando mensajes de soporte...');
        
        $supportSubjects = [
            'Problema con el portal de cliente',
            'Error en la facturaci√≥n mensual',
            'No puedo acceder a mi cuenta',
            'Problema con la app m√≥vil',
            'Error en el sistema de monitoreo',
            'Problema con el medidor inteligente',
            'No recibo notificaciones por email',
            'Problema con el panel de control'
        ];
        
        foreach ($supportSubjects as $subject) {
            for ($i = 0; $i < rand(1, 4); $i++) {
                $organization = $organizations->random();
                $user = $users->random();
                
                $message = $this->generateSupportMessage($subject);
                $priority = $this->getPriorityForSupport($subject);
                $status = $this->getStatusForPriority($priority);
                
                $messageData = [
                    'name' => fake()->name(),
                    'email' => fake()->safeEmail(),
                    'phone' => fake()->phoneNumber(),
                    'subject' => $subject,
                    'message' => $message,
                    'status' => $status,
                    'priority' => $priority,
                    'message_type' => 'support',
                    'ip_address' => $this->generateRandomIP(),
                    'user_agent' => $this->generateRandomUserAgent(),
                    'organization_id' => $organization->id,
                    'created_at' => Carbon::now()->subDays(rand(0, 14)),
                    'updated_at' => Carbon::now()->subDays(rand(0, 14))
                ];
                
                // Agregar campos adicionales seg√∫n el estado
                if ($status === 'read') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(1, 3));
                }
                
                if ($status === 'replied') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(2, 5));
                    $messageData['replied_at'] = Carbon::now()->subDays(rand(1, 2));
                    $messageData['replied_by_user_id'] = $users->random()->id;
                    $messageData['internal_notes'] = fake()->sentence();
                }
                
                // Asignar a un usuario t√©cnico
                $messageData['assigned_to_user_id'] = $users->random()->id;
                
                Message::create($messageData);
            }
        }
        
        $this->command->info("üÜò Mensajes de soporte creados");
    }
    
    private function createComplaintMessages($users, $organizations): void
    {
        $this->command->info('üò† Creando mensajes de quejas...');
        
        $complaintSubjects = [
            'Factura incorrecta recibida',
            'Mala atenci√≥n al cliente',
            'Retraso en la resoluci√≥n de problemas',
            'Informaci√≥n confusa en el portal',
            'Problema no resuelto despu√©s de varios contactos',
            'Cobro duplicado en mi cuenta',
            'Falta de transparencia en los precios',
            'Problema con el servicio t√©cnico'
        ];
        
        foreach ($complaintSubjects as $subject) {
            for ($i = 0; $i < rand(1, 3); $i++) {
                $organization = $organizations->random();
                $user = $users->random();
                
                $message = $this->generateComplaintMessage($subject);
                $priority = $this->getPriorityForComplaint($subject);
                $status = $this->getStatusForPriority($priority);
                
                $messageData = [
                    'name' => fake()->name(),
                    'email' => fake()->safeEmail(),
                    'phone' => fake()->phoneNumber(),
                    'subject' => $subject,
                    'message' => $message,
                    'status' => $status,
                    'priority' => $priority,
                    'message_type' => 'complaint',
                    'ip_address' => $this->generateRandomIP(),
                    'user_agent' => $this->generateRandomUserAgent(),
                    'organization_id' => $organization->id,
                    'created_at' => Carbon::now()->subDays(rand(0, 21)),
                    'updated_at' => Carbon::now()->subDays(rand(0, 21))
                ];
                
                // Agregar campos adicionales seg√∫n el estado
                if ($status === 'read') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(1, 5));
                }
                
                if ($status === 'replied') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(2, 7));
                    $messageData['replied_at'] = Carbon::now()->subDays(rand(1, 3));
                    $messageData['replied_by_user_id'] = $users->random()->id;
                    $messageData['internal_notes'] = 'Queja procesada y respuesta enviada';
                }
                
                // Asignar a un usuario senior para manejo
                $messageData['assigned_to_user_id'] = $users->random()->id;
                
                Message::create($messageData);
            }
        }
        
        $this->command->info("üò† Mensajes de quejas creados");
    }
    
    private function createSuggestionMessages($users, $organizations): void
    {
        $this->command->info('üí° Creando mensajes de sugerencias...');
        
        $suggestionSubjects = [
            'Mejora en el portal de cliente',
            'Nueva funcionalidad para la app m√≥vil',
            'Sugerencia para el sistema de facturaci√≥n',
            'Mejora en las notificaciones',
            'Nueva caracter√≠stica para el monitoreo',
            'Sugerencia para eventos comunitarios',
            'Mejora en la comunicaci√≥n',
            'Nueva funcionalidad para el panel de control'
        ];
        
        foreach ($suggestionSubjects as $subject) {
            for ($i = 0; $i < rand(1, 3); $i++) {
                $organization = $organizations->random();
                $user = $users->random();
                
                $message = $this->generateSuggestionMessage($subject);
                $priority = 'normal'; // Las sugerencias suelen ser prioridad normal
                $status = $this->getStatusForPriority($priority);
                
                $messageData = [
                    'name' => fake()->name(),
                    'email' => fake()->safeEmail(),
                    'phone' => fake()->optional(0.6)->phoneNumber(),
                    'subject' => $subject,
                    'message' => $message,
                    'status' => $status,
                    'priority' => $priority,
                    'message_type' => 'suggestion',
                    'ip_address' => $this->generateRandomIP(),
                    'user_agent' => $this->generateRandomUserAgent(),
                    'organization_id' => $organization->id,
                    'created_at' => Carbon::now()->subDays(rand(0, 45)),
                    'updated_at' => Carbon::now()->subDays(rand(0, 45))
                ];
                
                // Agregar campos adicionales seg√∫n el estado
                if ($status === 'read') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(1, 10));
                }
                
                if ($status === 'replied') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(5, 15));
                    $messageData['replied_at'] = Carbon::now()->subDays(rand(1, 7));
                    $messageData['replied_by_user_id'] = $users->random()->id;
                    $messageData['internal_notes'] = 'Sugerencia evaluada y respuesta enviada';
                }
                
                Message::create($messageData);
            }
        }
        
        $this->command->info("üí° Mensajes de sugerencias creados");
    }
    
    private function createUrgentMessages($users, $organizations): void
    {
        $this->command->info('üö® Creando mensajes urgentes...');
        
        $urgentSubjects = [
            'Corte de energ√≠a no programado',
            'Problema de seguridad en el sistema',
            'Fallo cr√≠tico en el portal',
            'Problema de facturaci√≥n masivo',
            'Error en el sistema de monitoreo',
            'Problema de acceso a cuentas',
            'Fallo en la app m√≥vil',
            'Problema de comunicaci√≥n del sistema'
        ];
        
        foreach ($urgentSubjects as $subject) {
            for ($i = 0; $i < rand(1, 2); $i++) {
                $organization = $organizations->random();
                $user = $users->random();
                
                $message = $this->generateUrgentMessage($subject);
                $priority = 'urgent';
                $status = $this->getStatusForPriority($priority);
                
                $messageData = [
                    'name' => fake()->name(),
                    'email' => fake()->safeEmail(),
                    'phone' => fake()->phoneNumber(),
                    'subject' => $subject,
                    'message' => $message,
                    'status' => $status,
                    'priority' => $priority,
                    'message_type' => 'support',
                    'ip_address' => $this->generateRandomIP(),
                    'user_agent' => $this->generateRandomUserAgent(),
                    'organization_id' => $organization->id,
                    'created_at' => Carbon::now()->subDays(rand(0, 3)),
                    'updated_at' => Carbon::now()->subDays(rand(0, 3))
                ];
                
                // Los mensajes urgentes suelen ser le√≠dos y respondidos r√°pidamente
                if ($status === 'read') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(0, 1));
                }
                
                if ($status === 'replied') {
                    $messageData['read_at'] = Carbon::now()->subDays(rand(0, 1));
                    $messageData['replied_at'] = Carbon::now()->subDays(rand(0, 1));
                    $messageData['replied_by_user_id'] = $users->random()->id;
                    $messageData['internal_notes'] = 'Problema urgente resuelto';
                }
                
                // Asignar inmediatamente a un usuario t√©cnico
                $messageData['assigned_to_user_id'] = $users->random()->id;
                
                Message::create($messageData);
            }
        }
        
        $this->command->info("üö® Mensajes urgentes creados");
    }
    
    private function createSpamMessages($users, $organizations): void
    {
        $this->command->info('üö´ Creando mensajes de spam...');
        
        $spamSubjects = [
            'Buy cheap viagra now!',
            'Make money fast from home!',
            'Free gift card! Click here!',
            'You won a prize! Claim now!',
            'Investment opportunity! Send money!',
            'Lose weight fast! Miracle pill!',
            'Free iPhone! Click to claim!',
            'Make $1000 daily! Join now!'
        ];
        
        foreach ($spamSubjects as $subject) {
            for ($i = 0; $i < rand(1, 2); $i++) {
                $organization = $organizations->random();
                $user = $users->random();
                
                $message = $this->generateSpamMessage($subject);
                $priority = 'low';
                $status = 'spam';
                
                $messageData = [
                    'name' => fake()->randomElement(['Spam User', 'Fake Name', 'Bot User', 'Test User']),
                    'email' => fake()->randomElement(['spam@fake.com', 'bot@test.com', 'fake@spam.com', 'test@bot.com']),
                    'phone' => fake()->optional(0.3)->phoneNumber(),
                    'subject' => $subject,
                    'message' => $message,
                    'status' => $status,
                    'priority' => $priority,
                    'message_type' => 'contact',
                    'ip_address' => $this->generateRandomIP(),
                    'user_agent' => fake()->randomElement([
                        'Mozilla/5.0 (compatible; SpamBot/1.0)',
                        'Bot/1.0 (Spam)',
                        'Fake User Agent',
                        'Spam Crawler'
                    ]),
                    'organization_id' => $organization->id,
                    'read_at' => Carbon::now()->subDays(rand(1, 7)),
                    'internal_notes' => 'Marcado como spam debido a contenido sospechoso',
                    'created_at' => Carbon::now()->subDays(rand(0, 14)),
                    'updated_at' => Carbon::now()->subDays(rand(0, 14))
                ];
                
                Message::create($messageData);
            }
        }
        
        $this->command->info("üö´ Mensajes de spam creados");
    }
    
    private function generateContactMessage(string $subject): string
    {
        $templates = [
            "Hola, me gustar√≠a obtener m√°s informaci√≥n sobre {$subject}. ¬øPodr√≠an contactarme para discutir las opciones disponibles?",
            "Buenos d√≠as, estoy interesado en {$subject} y me gustar√≠a saber m√°s detalles. ¬øCu√°ndo podr√≠an agendar una cita?",
            "Hola, tengo algunas preguntas sobre {$subject}. ¬øPodr√≠an proporcionarme m√°s informaci√≥n al respecto?",
            "Estimados, me interesa mucho {$subject} y quisiera conocer m√°s sobre los servicios que ofrecen.",
            "Buenas tardes, estoy buscando informaci√≥n sobre {$subject}. ¬øPodr√≠an enviarme material informativo?"
        ];
        
        return $templates[array_rand($templates)];
    }
    
    private function generateSupportMessage(string $subject): string
    {
        $templates = [
            "Hola, estoy experimentando problemas con {$subject}. He intentado varias soluciones pero no funciona. Necesito ayuda urgente.",
            "Buenos d√≠as, tengo un problema t√©cnico con {$subject}. El error que aparece es: [descripci√≥n del error]. ¬øPodr√≠an ayudarme?",
            "Hola, {$subject} no est√° funcionando correctamente desde hace 2 d√≠as. ¬øPodr√≠an revisar qu√© est√° pasando?",
            "Estimados, tengo un problema con {$subject} que me est√° afectando en mi trabajo diario. Necesito que lo resuelvan pronto.",
            "Buenas tardes, {$subject} presenta un comportamiento extra√±o. ¬øPodr√≠an investigar qu√© est√° causando este problema?"
        ];
        
        return $templates[array_rand($templates)];
    }
    
    private function generateComplaintMessage(string $subject): string
    {
        $templates = [
            "Estoy muy molesto con {$subject}. He contactado varias veces y nadie me ha dado una soluci√≥n. Esto es inaceptable.",
            "Hola, quiero presentar una queja formal sobre {$subject}. El servicio ha sido p√©simo y necesito que se resuelva inmediatamente.",
            "Estimados, estoy completamente insatisfecho con {$subject}. He sido cliente por a√±os y nunca hab√≠a tenido tan mal servicio.",
            "Buenos d√≠as, quiero quejarme formalmente sobre {$subject}. Esto me est√° causando problemas y p√©rdidas econ√≥micas.",
            "Hola, tengo una queja muy seria sobre {$subject}. El trato que he recibido ha sido deplorable y exijo una explicaci√≥n."
        ];
        
        return $templates[array_rand($templates)];
    }
    
    private function generateSuggestionMessage(string $subject): string
    {
        $templates = [
            "Hola, tengo una sugerencia para mejorar {$subject}. Creo que implementando [idea] podr√≠an mejorar significativamente la experiencia del usuario.",
            "Buenos d√≠as, me gustar√≠a sugerir una mejora para {$subject}. He notado que [observaci√≥n] y creo que podr√≠an optimizarlo.",
            "Estimados, tengo una propuesta para {$subject}. Como usuario frecuente, creo que [sugerencia] ser√≠a muy beneficioso.",
            "Hola, quiero compartir una idea para {$subject}. Creo que [propuesta] har√≠a el servicio mucho m√°s eficiente.",
            "Buenas tardes, tengo una sugerencia constructiva para {$subject}. Creo que [mejora] beneficiar√≠a a todos los usuarios."
        ];
        
        return $templates[array_rand($templates)];
    }
    
    private function generateUrgentMessage(string $subject): string
    {
        $templates = [
            "URGENTE: {$subject} est√° causando problemas cr√≠ticos. Necesito asistencia inmediata antes de que se agrave la situaci√≥n.",
            "EMERGENCIA: {$subject} ha fallado completamente. Esto est√° afectando mi negocio y necesito que lo resuelvan YA.",
            "CR√çTICO: {$subject} presenta un fallo que requiere atenci√≥n inmediata. No puedo continuar trabajando sin esto.",
            "URGENTE: {$subject} est√° fuera de servicio. Necesito que lo restauren lo antes posible.",
            "EMERGENCIA: {$subject} ha dejado de funcionar. Esto es cr√≠tico para mis operaciones diarias."
        ];
        
        return $templates[array_rand($templates)];
    }
    
    private function generateSpamMessage(string $subject): string
    {
        $templates = [
            "{$subject} Click here: http://spam.com and http://fake.com for amazing deals!",
            "{$subject} Visit: http://scam.com and make money fast!",
            "{$subject} Free gift at: http://fake.com and http://malicious.com",
            "{$subject} Amazing opportunity at: http://spam.com and http://scam.com",
            "{$subject} Don't miss out! Click: http://fake.com and http://spam.com"
        ];
        
        return $templates[array_rand($templates)];
    }
    
    private function getPriorityForSubject(string $subject): string
    {
        $highPriorityKeywords = ['urgente', 'cr√≠tico', 'emergencia', 'inmediato', 'problema'];
        $normalPriorityKeywords = ['consulta', 'informaci√≥n', 'solicitud', 'evento', 'taller'];
        
        foreach ($highPriorityKeywords as $keyword) {
            if (stripos($subject, $keyword) !== false) {
                return 'high';
            }
        }
        
        foreach ($normalPriorityKeywords as $keyword) {
            if (stripos($subject, $keyword) !== false) {
                return 'normal';
            }
        }
        
        return 'low';
    }
    
    private function getPriorityForSupport(string $subject): string
    {
        $urgentKeywords = ['error', 'problema', 'fallo', 'no funciona', 'acceso'];
        $highKeywords = ['portal', 'app', 'sistema', 'monitoreo'];
        
        foreach ($urgentKeywords as $keyword) {
            if (stripos($subject, $keyword) !== false) {
                return 'urgent';
            }
        }
        
        foreach ($highKeywords as $keyword) {
            if (stripos($subject, $keyword) !== false) {
                return 'high';
            }
        }
        
        return 'normal';
    }
    
    private function getPriorityForComplaint(string $subject): string
    {
        $urgentKeywords = ['factura', 'cobro', 'duplicado', 'cr√≠tico'];
        $highKeywords = ['atenci√≥n', 'resoluci√≥n', 'transparencia', 'servicio'];
        
        foreach ($urgentKeywords as $keyword) {
            if (stripos($subject, $keyword) !== false) {
                return 'urgent';
            }
        }
        
        foreach ($highKeywords as $keyword) {
            if (stripos($subject, $keyword) !== false) {
                return 'high';
            }
        }
        
        return 'normal';
    }
    
    private function getStatusForPriority(string $priority): string
    {
        $statuses = [
            'urgent' => ['pending', 'read', 'replied'],
            'high' => ['pending', 'read', 'replied', 'archived'],
            'normal' => ['pending', 'read', 'replied', 'archived'],
            'low' => ['pending', 'read', 'archived']
        ];
        
        $weights = [
            'urgent' => [20, 30, 50], // 50% respondidos
            'high' => [25, 35, 30, 10], // 30% respondidos
            'normal' => [30, 40, 20, 10], // 20% respondidos
            'low' => [40, 40, 20] // 20% archivados
        ];
        
        $statusList = $statuses[$priority];
        $weightList = $weights[$priority];
        
        return $statusList[array_rand($statusList)];
    }
    
    private function generateRandomIP(): string
    {
        $ips = [
            '192.168.1.' . rand(1, 254),
            '10.0.0.' . rand(1, 254),
            '172.16.' . rand(0, 31) . '.' . rand(1, 254),
            '203.0.113.' . rand(1, 254),
            '198.51.100.' . rand(1, 254),
            '127.0.0.' . rand(1, 254)
        ];
        
        return $ips[array_rand($ips)];
    }
    
    private function generateRandomUserAgent(): string
    {
        $userAgents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (Android 14; Mobile; rv:120.0) Gecko/120.0 Firefox/120.0'
        ];
        
        return $userAgents[array_rand($userAgents)];
    }
}
