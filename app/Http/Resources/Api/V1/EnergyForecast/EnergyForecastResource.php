<?php

namespace App\Http\Resources\Api\V1\EnergyForecast;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class EnergyForecastResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     */
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'forecast_number' => $this->forecast_number,
            'name' => $this->name,
            'description' => $this->description,
            'forecast_type' => $this->forecast_type,
            'forecast_type_label' => $this->getFormattedForecastType(),
            'forecast_horizon' => $this->forecast_horizon,
            'forecast_horizon_label' => $this->getFormattedForecastHorizon(),
            'forecast_method' => $this->forecast_method,
            'forecast_method_label' => $this->getFormattedForecastMethod(),
            'forecast_status' => $this->forecast_status,
            'forecast_status_label' => $this->getFormattedForecastStatus(),
            'accuracy_level' => $this->accuracy_level,
            'accuracy_level_label' => $this->getFormattedAccuracyLevel(),
            'accuracy_score' => $this->accuracy_score,
            'accuracy_score_formatted' => $this->getFormattedAccuracyScore(),
            'confidence_interval_lower' => $this->confidence_interval_lower,
            'confidence_interval_upper' => $this->confidence_interval_upper,
            'confidence_level' => $this->confidence_level,
            'confidence_level_formatted' => $this->getFormattedConfidenceLevel(),
            'confidence_interval_formatted' => $this->getFormattedConfidenceInterval(),
            'confidence_range' => $this->getConfidenceRange(),
            'confidence_range_formatted' => $this->getFormattedConfidenceRange(),
            'source_id' => $this->source_id,
            'source_type' => $this->source_type,
            'target_id' => $this->target_id,
            'target_type' => $this->target_type,
            'forecast_start_time' => $this->forecast_start_time,
            'forecast_start_time_formatted' => $this->getFormattedForecastStartTime(),
            'forecast_end_time' => $this->forecast_end_time,
            'forecast_end_time_formatted' => $this->getFormattedForecastEndTime(),
            'generation_time' => $this->generation_time,
            'generation_time_formatted' => $this->getFormattedGenerationTime(),
            'valid_from' => $this->valid_from,
            'valid_from_formatted' => $this->getFormattedValidFrom(),
            'valid_until' => $this->valid_until,
            'valid_until_formatted' => $this->getFormattedValidUntil(),
            'expiry_time' => $this->expiry_time,
            'expiry_time_formatted' => $this->getFormattedExpiryTime(),
            'time_zone' => $this->time_zone,
            'time_resolution' => $this->time_resolution,
            'forecast_periods' => $this->forecast_periods,
            'total_forecasted_value' => $this->total_forecasted_value,
            'total_forecasted_value_formatted' => $this->getFormattedTotalForecastedValue(),
            'forecast_unit' => $this->forecast_unit,
            'baseline_value' => $this->baseline_value,
            'baseline_value_formatted' => $this->getFormattedBaselineValue(),
            'trend_value' => $this->trend_value,
            'trend_value_formatted' => $this->getFormattedTrendValue(),
            'seasonal_value' => $this->seasonal_value,
            'seasonal_value_formatted' => $this->getFormattedSeasonalValue(),
            'cyclical_value' => $this->cyclical_value,
            'cyclical_value_formatted' => $this->getFormattedCyclicalValue(),
            'irregular_value' => $this->irregular_value,
            'irregular_value_formatted' => $this->getFormattedIrregularValue(),
            'forecast_data' => $this->forecast_data,
            'baseline_data' => $this->baseline_data,
            'trend_data' => $this->trend_data,
            'seasonal_data' => $this->seasonal_data,
            'cyclical_data' => $this->cyclical_data,
            'irregular_data' => $this->irregular_data,
            'weather_data' => $this->weather_data,
            'input_variables' => $this->input_variables,
            'model_parameters' => $this->model_parameters,
            'validation_metrics' => $this->validation_metrics,
            'performance_history' => $this->performance_history,
            'tags' => $this->tags,
            'notes' => $this->notes,
            
            // Campos calculados
            'forecast_duration' => $this->getForecastDuration(),
            'forecast_duration_formatted' => $this->getFormattedForecastDuration(),
            'time_to_expiry' => $this->getTimeToExpiry(),
            'time_to_expiry_formatted' => $this->getFormattedTimeToExpiry(),
            'is_expiring_soon' => $this->isExpiringSoon(),
            
            // Verificaciones de estado
            'is_draft' => $this->isDraft(),
            'is_active' => $this->isActive(),
            'is_validated' => $this->isValidatedStatus(),
            'is_expired' => $this->isExpired(),
            'is_superseded' => $this->isSuperseded(),
            'is_archived' => $this->isArchived(),
            'is_demand' => $this->isDemand(),
            'is_generation' => $this->isGeneration(),
            'is_consumption' => $this->isConsumption(),
            'is_price' => $this->isPrice(),
            'is_weather' => $this->isWeather(),
            'is_load' => $this->isLoad(),
            'is_renewable' => $this->isRenewable(),
            'is_storage' => $this->isStorage(),
            'is_transmission' => $this->isTransmission(),
            'is_hourly' => $this->isHourly(),
            'is_daily' => $this->isDaily(),
            'is_weekly' => $this->isWeekly(),
            'is_monthly' => $this->isMonthly(),
            'is_quarterly' => $this->isQuarterly(),
            'is_yearly' => $this->isYearly(),
            'is_long_term' => $this->isLongTerm(),
            'is_statistical' => $this->isStatistical(),
            'is_machine_learning' => $this->isMachineLearning(),
            'is_physical_model' => $this->isPhysicalModel(),
            'is_hybrid' => $this->isHybrid(),
            'is_expert_judgment' => $this->isExpertJudgment(),
            'is_high_accuracy' => $this->isHighAccuracy(),
            'is_medium_accuracy' => $this->isMediumAccuracy(),
            'is_low_accuracy' => $this->isLowAccuracy(),
            'is_approved' => $this->isApproved(),
            'is_expired_time' => $this->isExpiredTime(),
            'is_short_term' => $this->isShortTerm(),
            'is_medium_term' => $this->isMediumTerm(),
            'is_long_term_horizon' => $this->isLongTermHorizon(),
            
            // Clases de badge para UI
            'forecast_status_badge_class' => $this->getForecastStatusBadgeClass(),
            'forecast_type_badge_class' => $this->getForecastTypeBadgeClass(),
            'forecast_horizon_badge_class' => $this->getForecastHorizonBadgeClass(),
            'forecast_method_badge_class' => $this->getForecastMethodBadgeClass(),
            'accuracy_level_badge_class' => $this->getAccuracyLevelBadgeClass(),
            'accuracy_score_badge_class' => $this->getAccuracyScoreBadgeClass(),
            'confidence_level_badge_class' => $this->getConfidenceLevelBadgeClass(),
            'expiry_badge_class' => $this->getExpiryBadgeClass(),
            
            // Timestamps
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
            'deleted_at' => $this->deleted_at,
            'approved_at' => $this->approved_at,
            'approved_at_formatted' => $this->getFormattedApprovedAt(),
            'validated_at' => $this->validated_at,
            'validated_at_formatted' => $this->getFormattedValidatedAt(),
            
            // Permisos
            'can_edit' => auth()->user()?->can('update', $this->resource) ?? false,
            'can_delete' => auth()->user()?->can('delete', $this->resource) ?? false,
            'can_duplicate' => auth()->user()?->can('create', EnergyForecast::class) ?? false,
            'can_approve' => auth()->user()?->can('approve', $this->resource) ?? false,
            'can_validate' => auth()->user()?->can('validate', $this->resource) ?? false,
            
            // Relaciones (cargadas condicionalmente)
            'source' => $this->whenLoaded('source'),
            'target' => $this->whenLoaded('target'),
            'created_by' => $this->whenLoaded('createdBy'),
            'approved_by' => $this->whenLoaded('approvedBy'),
            'validated_by' => $this->whenLoaded('validatedBy'),
            
            // Conteos de relaciones
            'source_count' => $this->whenCounted('source'),
            'target_count' => $this->whenCounted('target'),
            'created_by_count' => $this->whenCounted('createdBy'),
            'approved_by_count' => $this->whenCounted('approvedBy'),
            'validated_by_count' => $this->whenCounted('validatedBy'),
        ];
    }
}
